import{at as p,au as l,av as f}from"./common-uZVBLpiI.js";import{B as i,a3 as t,a8 as a,aB as h}from"./vendor-Emzjfwe5.js";const y={id:-1,name:"",type:"get",enabled:!0,path:"",description:"",delay:0,response:"",projectId:""},c=i(),u=i([]);function k(){if(!c.value)throw new Error("未选择项目");return{...y,projectId:c.value.id}}async function $(e){c.value=e,u.value=[],c.value?(p("prjId",c.value.id),await o()):l("prjId")}async function v(e){try{if((await t.put(`${t.$apiBase}/mock/api/data/${e.id}`,{...e,id:void 0,projectId:void 0}).then(t.getData)).success)return a.success("修改数据成功"),o().then(),!0;a.error("修改数据失败")}catch{a.error("修改数据失败")}return!1}async function P(e){var r;try{if((await t.post(`${t.$apiBase}/mock/api/data`,{...e,id:void 0,projectId:(r=c.value)==null?void 0:r.id}).then(t.getData)).success)return a.success("创建数据成功"),o().then(),!0;a.error("创建数据失败")}catch{a.error("创建数据失败")}return!1}async function B(e){try{if((await t.delete(`${t.$apiBase}/mock/api/data/${e.id}`).then(t.getData)).success)return a.success("删除数据成功"),o().then(),!0;a.error("删除数据失败")}catch{a.error("删除数据失败")}return!1}async function o(){if(!c.value){a.error("未选择项目");return}try{u.value=await m(c.value)}catch(e){console.log(e),a.error("获取数据列表失败")}}async function m(e){const r=await t.get(`${t.$apiBase}/mock/api/prj/${e.id}/list`).then(t.getData);if(r.success)return(r.data||[]).map(s=>(s.createdAt=h(s.createdAt).format("YYYY-MM-DD HH:mm:ss"),s.url=`${t.$apiBase}/mock/${e.id}${e.path}${s.path}`,s));throw new Error(r.message)}const g={id:"",name:"",path:"",description:""},d=i([]);async function M(){try{await n();const e=f("prjId");e&&j(e)}catch{throw new Error("获取项目列表失败")}}function I(){return{...g}}function j(e){if(typeof e=="string"){const r=d.value.find(s=>s.id===e);if(r)e=r;else{a.error("未找到项目");return}}$(e).then()}async function E(e){try{if((await t.post(`${t.$apiBase}/mock/api/prj`,{...e,id:void 0}).then(t.getData)).success)return a.success("创建项目成功"),n().then(),!0;a.error("创建项目失败")}catch{a.error("创建项目失败")}return!1}async function Y(e){try{if((await t.put(`${t.$apiBase}/mock/api/prj/${e.id}`,e).then(t.getData)).success)return a.success("更新项目成功"),n().then(),!0;a.error("更新项目失败")}catch{a.error("更新项目失败")}return!1}async function b(e){try{if((await t.delete(`${t.$apiBase}/mock/api/prj/${e.id}`).then(t.getData)).success)return a.success("删除项目成功"),n().then(),!0;a.error("删除项目失败")}catch{a.error("删除项目失败")}return!1}async function n(){try{const e=await t.get(`${t.$apiBase}/mock/api/prj/list`).then(t.getData);e.success?d.value=e.data||[]:a.error("获取项目列表失败")}catch(e){console.log(e),a.error("获取项目列表失败")}}export{$ as a,j as b,P as c,B as d,v as e,b as f,k as g,I as h,E as i,M as j,u as m,d as p,c as s,Y as u};
